import chalk from "chalk";
import { Command } from "commander";
import fs from "fs";
import { sep as localPathSeparator } from "path";
import path from "path/posix";
import { getTSsRecursively } from "./utils/getFilesRecursively.js";

// Define CLI
const program = new Command()
	.summary("generate combined zod files for pf2ools-schema")
	.description(
		"Generates a TypeScript index file from recognised metafile, content, and combined datatypes. All `.ts` files in a directory are included, even if they aren't zod declarations. A schema export is assumed to have the same name as its file, plus a possible prepended underscore.",
	)
	.argument("<path>", "Directory")
	.option("-r, --recurse", "Find zod files recursively")
	.option("-e, --exclude <paths...>", "Paths to files or directories that should be excluded")
	.parse(process.argv);

// File-tree-walker to find .ts files

const opts = program.opts();
const [zodDir] = program.args.map((arg) => path.join(...arg.toString().split(localPathSeparator)));

let zodDirFilePoint;
try {
	zodDirFilePoint = fs.statSync(zodDir);
} catch {
	program.error(chalk.red(`"${zodDir}" not found`), {
		exitCode: 1,
		code: "invalid.path",
	});
}
if (!zodDirFilePoint.isDirectory())
	program.error(chalk.red(`"${zodDir} is not a directory`), { exitCode: 1, code: "invalid.path" });

let files = [];
if (opts.recurse) {
	files = files.concat(getTSsRecursively(zodDir));
} else {
	files = files.concat(
		fs
			.readdirSync(zodDir)
			.filter((file) => isTS(file))
			.map((file) => path.join(zodDir, file)),
	);
}

let relativeFiles = files
	.map((file) => path.relative(zodDir, file))
	.sort((a, b) => path.dirname(a).length - path.dirname(b).length);

opts.exclude.forEach((exclusion) => {
	exclusion = path.relative(zodDir, exclusion.split(localPathSeparator).join(path.sep));
	relativeFiles = relativeFiles.filter((file) => !file.match(new RegExp(`^${exclusion}(?=$|\/)`, "i")));
});
relativeFiles = relativeFiles.filter((file) => path.basename(file) !== "_index.ts");
if (!relativeFiles.length) {
	console.log(chalk.blue("No TypeScript files found"));
	process.exit();
}

// Generate zod index
let indexTS = `// This file was generated by scripts/generate-zod-index.js at ${new Date().toUTCString()}\n`;
let lastDir;
for (const file of relativeFiles) {
	if (!lastDir || lastDir !== path.dirname(file)) {
		lastDir = path.dirname(file);
		indexTS += `\n// ${path.dirname(file).replace(/^.*\//, "")}\n`;
	}
	indexTS += `export { ${path.basename(file, ".ts").replace(/^_/, "")} } from "./${file.replace(
		/\.ts$/,
		"",
	)}.js";\n`;
}
fs.writeFileSync(`${zodDir}/_index.ts`, indexTS);
console.log(chalk.green("Index file generated"));
