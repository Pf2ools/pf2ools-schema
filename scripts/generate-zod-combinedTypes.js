import chalk from "chalk";
import { Command } from "commander";
import fs from "fs";
import path from "path/posix";
import { generateZodScriptInitialiser } from "./utils/generateZodScriptInitialiser.js";

// Define CLI
const program = new Command()
	.summary("generate combined zod files for pf2ools-schema")
	.description(
		"Generates various TypeScript files from the base Zod types. All `.ts` files in a directory are included, even if they aren't zod declarations. The schema export is assumed to have the same name as its file.",
	)
	.argument("<path>", "Directory")
	.option("-r, --recurse", "Find zod files recursively")
	.option("-e, --exclude <paths...>", "Paths to files or directories that should be excluded")
	.parse(process.argv);

const { relativeFiles, zodDir } = generateZodScriptInitialiser(program);

let contentTypesImportString = "";
const contentTypes = [];
for (const file of relativeFiles) {
	const code = fs.readFileSync(path.join(zodDir, file), { encoding: "utf8" });
	if (code.split("\n").some((line) => line.match(/=\s*content.merge\(/))) {
		contentTypesImportString += `import { ${path.basename(file, ".ts")} } from "./${file.replace(/\.ts$/, ".js")}";\n`;
		contentTypes.push(path.basename(file, ".ts"));
	}
}

const getTSTemplate = () =>
	`// This file was generated by scripts/generate-zod-combinedTypes.js at ${new Date().toUTCString()}\n\nimport { z } from "zod";\n\n`;

fs.writeFileSync(
	`${zodDir}/_content.ts`,
	getTSTemplate().concat(
		contentTypesImportString,
		"\n",
		'export const content = z.discriminatedUnion("type", [',
		"\n",
		`\t${contentTypes.join(",\n\t")},\n`,
		"]);\n",
	),
);
console.log(chalk.green("Content type file generated"));

const metaTypes = ["license", "source", "sourceGroup"];
const metaTypesImportString = metaTypes
	.map((type) => {
		const file = relativeFiles.find((file) => file.match(new RegExp(`${type}.ts$`, "i")));
		if (!file) return "";
		return `import { ${type} } from "./${file.replace(/\.ts$/, ".js")}";`;
	})
	.join("\n");
fs.writeFileSync(
	`${zodDir}/_data.ts`,
	getTSTemplate().concat(
		metaTypesImportString,
		"\n",
		contentTypesImportString,
		"\n",
		'export const data = z.discriminatedUnion("type", [',
		"\n",
		`\t${metaTypes.concat(contentTypes).join(",\n\t")},\n`,
		"]);\n",
	),
);
console.log(chalk.green("Data type file generated"));
