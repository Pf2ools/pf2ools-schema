// This file was generated by scripts/generate-zod-combinedTypes.js at Thu, 16 May 2024 01:44:09 GMT
import { z } from "zod";
import { license } from "./license.js";
import { source } from "./source.js";
import { sourceGroup } from "./sourceGroup.js";
import { background } from "./content/background.js";
import { condition } from "./content/condition.js";
import { domain } from "./content/domain.js";
import { event } from "./content/event.js";
import { familiarAbility } from "./content/familiarAbility.js";
import { relicGift } from "./content/relicGift.js";
import { skill } from "./content/skill.js";
const refineContent = (content) => content.refine((content) => (content.reference ? !!content.data !== !!content.reference.modifications : content.data), "`data` and `reference.modifications` cannot be used simultaneously; choose one method to describe the content.");
export const bundle = z.object({
    license: z.array(license).min(1).optional(),
    source: z.array(source).min(1),
    sourceGroup: z.array(sourceGroup).min(1).optional(),
    background: z.array(refineContent(background)).min(1).optional(),
    condition: z.array(refineContent(condition)).min(1).optional(),
    domain: z.array(refineContent(domain)).min(1).optional(),
    event: z.array(refineContent(event)).min(1).optional(),
    familiarAbility: z.array(refineContent(familiarAbility)).min(1).optional(),
    relicGift: z.array(refineContent(relicGift)).min(1).optional(),
    skill: z.array(refineContent(skill)).min(1).optional(),
});
import { nonEmpty } from "./utils/nonEmpty.js";
export const anyBundle = bundle.partial().refine(...nonEmpty);
